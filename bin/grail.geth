#!/bin/sh

# mount /proc and /sys (/dev is automounted by the kernel)
mount -t proc proc proc/
mount -t sysfs sys sys/

# geth requires sufficient entropy, which we fetch from gRaIL
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom
rngd -r /dev/urandom

# configure network
ifconfig eth0 $ipAddr netmask 255.255.255.0

# start the geth client
#geth --nousb --networkid 15123 --verbosity 5 --datadir /root/.ethereum init /bin/genesis.json &> /bin/outputGeth0init
#geth --nousb --networkid 15123 --verbosity 5 --datadir /root/.ethereum --nat none --bootnodes $bootnodes &> /bin/outputGeth1run &
geth --nousb --networkid 15123 --verbosity 0 --datadir /root/.ethereum init /bin/genesis.json
geth --nousb --networkid 15123 --verbosity 0 --datadir /root/.ethereum --nat none --bootnodes $bootnodes &


timestamp=0
timeToSleep=0.0000001
sleep ${timeToSleep}
while :
do
	timestampFmt=$( printf '%03d' "$timestamp" )
  netstat &> /bin/outputNetstat_${timestampFmt}_0 &
  #geth --datadir /root/.ethereum --networkid 15123 attach 'http://localhost:8101' --exec admin.discinfo &> /bin/outputGeth3AdminDiscinfo-${timestampFmt}-${runId}-$nodeId.txt &
  geth --datadir /root/.ethereum --networkid 15123 attach --exec admin.discinfo &> /bin/outputGeth3AdminDiscinfo-${timestampFmt}-${runId}-$nodeId.txt &
  geth --datadir /root/.ethereum --networkid 15123 attach --exec admin.peers &> /bin/outputGeth3AdminPeers-${timestampFmt}-${runId}-$nodeId.txt &
	timestamp=$( echo "$timestamp+1" | bc -l )
	printf '        --------------------------t=%s, tts=%.4f sleep pre --------------------------\n' "$timestampFmt" "$timeToSleep"
  sleep ${timeToSleep}
	printf '        ++++++++++++++++++++++++++t=%s, tts=%.4f sleep post++++++++++++++++++++++++++\n' "$timestampFmt" "$timeToSleep"
done
